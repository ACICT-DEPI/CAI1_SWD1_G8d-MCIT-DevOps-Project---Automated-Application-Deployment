pipeline {
    agent any

    environment {
        // Hardcoded DockerHub credentials
        DOCKERHUB_USERNAME = "ahmedalmahdi"
        DOCKERHUB_PASSWORD = "1234qweasd"
        DOCKER_IMAGE_FRONT = "ahmedalmahdi/clientside"
        DOCKER_IMAGE_BACK = "ahmedalmahdi/serverside"
        
        // Hardcoded GitHub token
        GITHUB_TOKEN = "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"
        GITHUB_REPO = "https://github.com/ciscosky/MCIT-DevOps-Project.git"
    }

    stages {
        stage('Checkout') {
            steps {
                // Cloning the GitHub repository with token authentication
                script {
                    sh "git clone https://$GITHUB_TOKEN@github.com/ciscosky/MCIT-DevOps-Project.git"
                }
            }
        }
        
        stage('Run Unit Tests') {
            parallel {
                stage('ServerSide Tests') {
                    steps {
                        dir('ServerSide') {
                            // Running unit tests for the ServerSide application
                            sh 'dotnet test'
                        }
                    }
                }
                stage('ClientSide Tests') {
                    steps {
                        dir('ClientSide') {
                            // Running unit tests for the Angular ClientSide application
                            sh 'ng test --watch=false'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Building the Docker FRONT image
                    sh "docker build -t ${DOCKER_IMAGE_FRONT}:${env.BUILD_ID} ."
                    // Building the Docker BACK image
                    sh "docker build -t ${DOCKER_IMAGE_BACK}:${env.BUILD_ID} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Logging into DockerHub and pushing the image
                    sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                    sh "docker push ${DOCKER_IMAGE_FRONT}:${env.BUILD_ID}"
                    sh "docker push ${DOCKER_IMAGE_BACK}:${env.BUILD_ID}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Applying Kubernetes manifests from your repository
                    sh "kubectl apply -f k8s-manifets/"
                }
            }
        }
    }

    post {
        always {
            // Cleanup - Remove the Docker images after pushing
            sh "docker
